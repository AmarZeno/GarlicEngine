#include "HeapAllocator.h"
#include <stdlib.h>
#include "Diagnostics.h"
#include <stdint.h>


#define MEMSYSTEM_SIGNATURE 0xDEADC0DE
#define MEMSYSTEM_ENDMARKER 0xE00DC0DE

#define MEMSYSTEM_ALIGNMENT 4

enum GarbageCollectionType
{
	DescriptorFix,
	StorageFix
};

HeapAllocator::HeapAllocator()
{
}


HeapAllocator::~HeapAllocator()
{
}

void * HeapAllocator::Initialize(void * pHeapMemory, const size_t sizeHeap, const guint_t noOfDescriptors) {

	// Making a local reference for all the passed values
	pHeapMemSystem = pHeapMemory;
	memSystemSize = sizeHeap;
	numberOfDescriptors = noOfDescriptors;

	pFreeMemoryList = pHeapMemory;
	// Char sizes to 1. Instantiating the struct pointer within the available space

	size_t  requiredDescriptorStorage = noOfDescriptors * sizeof(BlockDescriptor);

	pFreeDescriptorList = reinterpret_cast<BlockDescriptor *>(reinterpret_cast<uintptr_t>(pFreeMemoryList) + sizeHeap) - requiredDescriptorStorage;
	pFreeDescriptorList->pNext = pFreeDescriptorList + sizeof(BlockDescriptor);
	pFreeDescriptorList->pPrev = nullptr;
	pFreeDescriptorList->iSize = 0;
	size_t currentBlockDescriptor = 1;
	while (true)
	{
		if (currentBlockDescriptor == numberOfDescriptors) {
			break;
		}
		pFreeDescriptorList = pFreeDescriptorList->pNext;
		if (currentBlockDescriptor == numberOfDescriptors - 1) {
			pFreeDescriptorList->pNext = nullptr;
		}
		else {
			pFreeDescriptorList->pNext = pFreeDescriptorList + sizeof(BlockDescriptor);
		}
		
		pFreeDescriptorList->pPrev = pFreeDescriptorList - sizeof(BlockDescriptor);
		pFreeDescriptorList->iSize = 0;
		currentBlockDescriptor++;
	}

	pFreeDescriptorList->pHeap = static_cast<BlockDescriptor*>(pFreeMemoryList);

	pFreeDescriptorList->iSize = sizeHeap - (noOfDescriptors * sizeof(BlockDescriptor));


	pOutstandingAllocatedList = nullptr;
	return nullptr;
}

void * HeapAllocator::Allocate(const size_t size) {

	// Moving the free memory pointer after the requested size
	size_t iRequestedBytes = size + sizeof(int);
	size_t availableSize = GetAvailableSize();

	// Safety check and garbage collection if required
	if (size == 0) {
		return NULL;
	}

	if (iRequestedBytes > availableSize) {
		return NULL;
	} 

	// Check for available size descriptor
	while (true)
	{
		if (iRequestedBytes < pFreeDescriptorList->iSize) {
			// Available size found in the matching block
			// Do nothing
			break;
		}
		else {
			// Move to the previous available block
			pFreeDescriptorList = pFreeDescriptorList->pPrev;
		}

		if (pFreeDescriptorList->pPrev == nullptr) {
			// Do garbage collection
			GarbageCollect();
			break;
		}
	}

	/*Current Allocation Block*/
	// Steps for new allocation
	// 1) Update allocation for the first entry
	// 2) Update allocation for the following entry
	
	if (pOutstandingAllocatedList == nullptr) {
		pOutstandingAllocatedList = pFreeDescriptorList;

		pOutstandingAllocatedList->pHeap = pFreeDescriptorList->pHeap;
		// Move the free block descriptor for the next allocation
		pFreeDescriptorList = pFreeDescriptorList->pPrev;

		pOutstandingAllocatedList->pNext = nullptr;
		pOutstandingAllocatedList->pPrev = nullptr;

		pFreeDescriptorList->pNext = nullptr;
	}
	else {
		BlockDescriptor *prevAllocatedList = pOutstandingAllocatedList;
		pOutstandingAllocatedList = pFreeDescriptorList;

		// Check if pheap reached last, then do garbage collect


		pOutstandingAllocatedList->pHeap = pFreeDescriptorList->pHeap;
		// Move the free block descriptor for the next allocation
		pFreeDescriptorList = pFreeDescriptorList->pPrev;
		pFreeDescriptorList->pNext = nullptr;

		pOutstandingAllocatedList->pNext = prevAllocatedList;
		pOutstandingAllocatedList->pPrev = nullptr;

		pOutstandingAllocatedList->pNext->pPrev = pOutstandingAllocatedList;
	}

	pOutstandingAllocatedList->iSize = iRequestedBytes;

	if (pFreeDescriptorList->pPrev == nullptr) {

	}
	else {
		/*Next allocation Block*/
		// Fetching previous block to update the next heap pointer
		pFreeDescriptorList->pHeap = pOutstandingAllocatedList->pHeap + pOutstandingAllocatedList->iSize;
		// Subtracting available memory with used Memory
		pFreeDescriptorList->iSize = memSystemSize - (numberOfDescriptors * sizeof(BlockDescriptor)) - GetUsedSize();
		//pFreeDescriptorList->pPrev = pFreeDescriptorList + sizeof(BlockDescriptor);
	}

	//ResetFreeDescriptorList();

	return pOutstandingAllocatedList->pHeap;
}

void * HeapAllocator::Deallocate(void * deallocatePointer)
{
	BlockDescriptor *tempOutstandingAllocatedList = pOutstandingAllocatedList;
	while (true)
	{
		if (deallocatePointer == tempOutstandingAllocatedList->pHeap) {

			BlockDescriptor *deallocatedPointerRef = tempOutstandingAllocatedList;
			//BlockDescriptor *swapPreviousFreeList = pFreeDescriptorList->pPrev;
			//pFreeDescriptorList->pPrev = tempOutstandingAllocatedList;
			//pFreeDescriptorList->pPrev->pPrev = swapPreviousFreeList;

			/*Cases to connect Allocated list*/
			// Case 1) When previous and next are null. Single block entry.
			if (tempOutstandingAllocatedList->pPrev == nullptr && tempOutstandingAllocatedList->pNext == nullptr) {
				pOutstandingAllocatedList = nullptr;
			}

			// Case 2) When previous alone is nullptr. Multiple block entry. head at first position 
			if (tempOutstandingAllocatedList->pPrev == nullptr && tempOutstandingAllocatedList->pNext != nullptr) {
			//	pOutstandingAllocatedList->pNext->pPrev = nullptr;
				pOutstandingAllocatedList = pOutstandingAllocatedList->pNext;
				pOutstandingAllocatedList->pPrev = nullptr;
			}

			// Case 3) When next alone is nullptr. Multiple block entry. removal at last position
			if (tempOutstandingAllocatedList->pPrev != nullptr && tempOutstandingAllocatedList->pNext == nullptr) {
				tempOutstandingAllocatedList->pPrev->pNext = nullptr;
			}

			// Case 4) When previous and next are not null. Multiple block entry. Removal from centre of a contigous block.
			if (tempOutstandingAllocatedList->pPrev != nullptr && tempOutstandingAllocatedList->pNext != nullptr) {
				tempOutstandingAllocatedList->pPrev->pNext = tempOutstandingAllocatedList->pNext;
				tempOutstandingAllocatedList->pNext->pPrev = tempOutstandingAllocatedList->pPrev;
			}

			// Add the removed allocated element to the free list
			/*tempOutstandingAllocatedList->pNext = pFreeDescriptorList;
			tempOutstandingAllocatedList->pPrev = pFreeDescriptorList->pPrev;
			pFreeDescriptorList->pPrev->pNext = tempOutstandingAllocatedList;
			pFreeDescriptorList->pPrev = tempOutstandingAllocatedList;*/
			AddToFreeBlocks(deallocatedPointerRef);

			deallocatePointer = nullptr;
			break;
		}
		tempOutstandingAllocatedList = tempOutstandingAllocatedList->pNext;
		if(tempOutstandingAllocatedList == nullptr) {
			break;
		}
	}

	return nullptr;
}

void HeapAllocator::AddToFreeBlocks(BlockDescriptor *freedBlock) {
	// Start from beginning of free list
	BlockDescriptor * pfreeDescriptorCurrentRef = pFreeDescriptorList;
	while (true)
	{
		if (freedBlock < pfreeDescriptorCurrentRef && pfreeDescriptorCurrentRef->pPrev == nullptr) {
			// add the block before the head
			freedBlock->pPrev = nullptr;
			freedBlock->pNext = pfreeDescriptorCurrentRef;
			pfreeDescriptorCurrentRef->pPrev = freedBlock;
			break;
		}
		else  if (freedBlock > pfreeDescriptorCurrentRef && pfreeDescriptorCurrentRef->pNext == nullptr) {
			// add the block at the tail
			freedBlock->pNext = nullptr;
			freedBlock->pPrev = pfreeDescriptorCurrentRef;
			pfreeDescriptorCurrentRef->pNext = freedBlock;

			// Reassign free descriptor to the last block
			pFreeDescriptorList = freedBlock;
			break;
		} else if (freedBlock > pfreeDescriptorCurrentRef && freedBlock < pfreeDescriptorCurrentRef->pNext) {
			// if address is greater than the current element and lesser than the next element
			freedBlock->pNext = pfreeDescriptorCurrentRef->pNext;
			freedBlock->pPrev = pfreeDescriptorCurrentRef;
			pfreeDescriptorCurrentRef->pNext = freedBlock;
			freedBlock->pNext->pPrev = freedBlock;
			break;
		}
		if (pfreeDescriptorCurrentRef->pPrev == nullptr) {
			// Break if it reaches the end of the linked list
			break;
		}
		pfreeDescriptorCurrentRef = pfreeDescriptorCurrentRef->pPrev;
	}
}

void HeapAllocator::GarbageCollect()
{
	ResetFreeDescriptorList();

		while (true)
		{
			if (pFreeDescriptorList->pHeap + pFreeDescriptorList->iSize == pFreeDescriptorList->pPrev->pHeap) {
				if (pFreeDescriptorList->pHeap < pFreeDescriptorList->pPrev->pHeap) {
					pFreeDescriptorList->iSize += pFreeDescriptorList->pPrev->iSize;
				}
				else {
					pFreeDescriptorList->pHeap = pFreeDescriptorList->pPrev->pHeap;
					pFreeDescriptorList->iSize += pFreeDescriptorList->pPrev->iSize;
				}
			}
			else
			{
				if (pFreeDescriptorList->pPrev) {
					break;
				}
				pFreeDescriptorList = pFreeDescriptorList->pPrev;
			}
		}

	ResetFreeDescriptorList();
}


namespace HeapAllocatorProxy {
	HeapAllocator * Initialize(void * pHeapMemory, const size_t sizeHeap, const guint_t noOfDescriptors)
	{
		HeapAllocator *allocator = new HeapAllocator();
		// Making a local reference for all the passed values

		allocator->pHeapMemSystem = pHeapMemory;
		allocator->memSystemSize = sizeHeap;
		allocator->numberOfDescriptors = noOfDescriptors;

		allocator->pFreeMemoryList = pHeapMemory;

		// Char sizes to 1. Instantiating the struct pointer within the available space

		size_t  requiredDescriptorStorage = noOfDescriptors * sizeof(BlockDescriptor);

		allocator->pFreeDescriptorList = reinterpret_cast<BlockDescriptor *>(reinterpret_cast<uintptr_t>(pFreeMemoryList) + sizeHeap) - requiredDescriptorStorage;
		pFreeDescriptorList->pNext = pFreeDescriptorList + sizeof(BlockDescriptor);
		pFreeDescriptorList->pPrev = nullptr;
		pFreeDescriptorList->iSize = 0;
		size_t currentBlockDescriptor = 1;
		while (true)
		{
			if (currentBlockDescriptor == numberOfDescriptors) {
				break;
			}
			pFreeDescriptorList = pFreeDescriptorList->pNext;
			if (currentBlockDescriptor == numberOfDescriptors - 1) {
				pFreeDescriptorList->pNext = nullptr;
			}
			else {
				pFreeDescriptorList->pNext = pFreeDescriptorList + sizeof(BlockDescriptor);
			}

			pFreeDescriptorList->pPrev = pFreeDescriptorList - sizeof(BlockDescriptor);
			pFreeDescriptorList->iSize = 0;
			currentBlockDescriptor++;
		}

		pFreeDescriptorList->pHeap = static_cast<BlockDescriptor*>(pFreeMemoryList);

		pFreeDescriptorList->iSize = sizeHeap - (noOfDescriptors * sizeof(BlockDescriptor));


		pOutstandingAllocatedList = nullptr;
		return nullptr;
	}
}


